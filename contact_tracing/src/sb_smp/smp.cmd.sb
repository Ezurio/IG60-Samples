// Copyright (c) 2014-2024, Ezurio LLC.
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// ---------------------
//  Application Version 
// ---------------------
#define AppVer "1.01"

//******************************************************************************
// Definitions
//******************************************************************************

        //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                             1

        //Set this to 1 to enable direct sB UART bridging (faster throughput)
#define USE_BRIDGE                                      1

        //Number of connections
#define NUM_OF_CONNS                                    10
        //Number of spp ports
#define NUM_OF_SPP_PORTS                                8
        //Number of services
#define NUM_OF_SVCS                                     4
        //Number of attribure metadata
#define NUM_OF_METADATA                                 4
        //Number of characteristics
#define NUM_OF_CHARS                                    8
        //Size of i[]
#define NUM_OF_I_PARAMS                                 (8)
        //Size of s$[] and must be at least 8 elements for BleSvcRegDevInfo()
#define NUM_OF_S_PARAMS                                 (8)
        //Number of whitelist handles we can manage
#define NUM_OF_WHITELIST                                (4)

#define VSP_MAX_CHARDATA_LEN                            (20)
#define VSP_RX_CHAR_HANDLE                              (17)
#define VSP_TX_CHAR_HANDLE                              (14)

//BLE EVENT MSG IDs
#define BLE_EVBLEMSGID_CONNECT                          0    //msgCtx = connection handle
#define BLE_EVBLEMSGID_DISCONNECT                       1    //msgCtx = connection handle
#define BLE_EVBLEMSGID_IMMEDIATE_ALERT_SERVICE_ALERT    2    //msgCtx = alert level
#define BLE_EVBLEMSGID_LINKLOSS_SERVICE_ALERT           3    //msgCtx = alert level
#define BLE_EVBLEMSGID_SERVICE_ERROR                    4    //msgCtx = resultcode
#define BLE_EVBLEMSGID_HTS_INDICATION_STATE             5    //msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_HTS_INDICATION_CNF               6    //msgCtx = not used
#define BLE_EVBLEMSGID_BPS_INDICATION_STATE             7    //msgCtx = new indication state 0=off, 1=on
#define BLE_EVBLEMSGID_BPS_INDICATION_CNF               8    //msgCtx = not used
#define BLE_EVBLEMSGID_DISPLAY_PASSKEY                  9    //msgCtx = passcode to display
#define BLE_EVBLEMSGID_NEW_BOND                         10   //msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTH_KEY_REQUEST                 11   //msgCtx = 1 for passkey, 2 for 16 byte OOB data
#define BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE           12   //msgCtx = new notification state 0=off, 1=on
//#define FUTURE_USE                                    13
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE                14   //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL           15   //msgCtx = connection handle
#define BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER            16   //msgCtx = connection handle
#define BLE_EVBLEMSGID_UPDATED_BOND                     17   //msgCtx = connection handle
#define BLE_EVBLEMSGID_ENCRYPTED                        18   //msgCtx = connection handle
#define BLE_EVBLEMSGID_POWER_FAILURE_WARNING            19   //msgCtx = current supply voltage
#define BLE_EVBLEMSGID_UNENCRYPTED                      20   //msgCtx = connection handle
#define BLE_EVBLEMSGID_DEVICENAME_WRITE                 21   //msgCtx = connection handle
#define BLE_EVBLEMSGID_OOB_AVAILABLE_REQEST             25 // msgCtx = connection handle
#define BLE_EVBLEMSGID_AUTHENTICATION_FAILED            26 // msgCtx = connection handle
#define BLE_EVBLEMSGID_LESC_PAIRING                     27 // msgCtx = connection handle
#define BLE_EVBLEMSGID_LESC_OOB_REQUEST                 28 // msgCtx = connection handle


//APP RUN MODES
#define CMD_MODE                                        0
#define BRIDGE_VSP_MODE                                 1


//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "err1:";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource as early as possible
//******************************************************************************

//==============================================================================
//==============================================================================
sub AssertRC(byval rc as integer,byval tag as integer)
  if (ENABLE_DEBUG_PRINTS!=0) && (rc!=0) then
    print "err2:";integer.h' rc;" at tag ";tag
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsg(byval msg$ as string)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsgVal(byval msg$ as string, byval vl as integer)
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n";msg$;" ";vl
  endif
endsub



//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim rc
dim stRsp$ as string        //Uart rx data is stored here

dim ok$,er$,pr$, uc$

dim i[NUM_OF_I_PARAMS]      //Index 0 used for return values
dim s$[NUM_OF_S_PARAMS]     //Must be at least 8 elements for BleSvcRegDevInfo()

dim urtcmd$                 //CMD line from uart
dim tkn$,tlen               //Used by command parser
dim amd[NUM_OF_METADATA]    //gatts : attribute meta data
dim hchar[NUM_OF_CHARS]     //gatts : handles for characteristics
dim hc[NUM_OF_CONNS+1]      //Contains connection handles
dim hWlist[NUM_OF_WHITELIST+1]      //contains whitelist handles
dim conns                   //Number of connections
dim gcState                 //gatt client state, 0=IDLE, 1=TableMapping
dim urts                    //Will be <0 if uart parser suspended
dim hcVsp                   //Handle of connection to use for VSP service
dim vdta$                   //Data to send over virtual serial port
dim vsplen                  //0 implies can send data. >0 waiting for notify event
dim vspRxH                  //Handle of the RX char in the peripheral for VSP
dim vspTxH                  //Handle of the TX char in the peripheral for VSP
dim carCnt                  //Count variable for number of times '^' entered
dim BridgeHandle            //Handle of sB UART bridge

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************

ok$    = "\nOK"
er$    = "\nERROR "
pr$    = "\r\n>"
uc$    = "\nUNKNOWN COMMAND"

gcState = 0  //gatt client is idle
urts=0       //Not suspended
conns = 0    //Number of connections
hcVsp = -1
vsplen = 0
vspRxH = VSP_RX_CHAR_HANDLE
vspTxH = VSP_TX_CHAR_HANDLE
BridgeHandle = 0

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************



//==============================================================================
//release all connection handles
//==============================================================================
sub InitConnHandles()
  dim z
  for z=0 to (NUM_OF_CONNS)
    hc[z]=-1
  next
endsub

//==============================================================================
//==============================================================================
function AcqConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == -1 then
      hc[z]=hConn
      exitfunc z
    endif
  next
endfunc 0

//==============================================================================
//==============================================================================
function RelConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == hConn then
      hc[z]=-1
      exitfunc z
    endif
  next
endfunc 0

//==============================================================================
//==============================================================================
function GetConnHandle(hConn)
  dim z
  for z=1 to (NUM_OF_CONNS)
    if hc[z] == hConn then
      exitfunc z
    endif
  next
endfunc 0



//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractIntTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractIntToken(u$,i[stIdx])
    if tlen == 0 then
      exitfunc 4
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
function ExtractStrTokens(u$,stIdx,num)
  while num>0
    tlen = ExtractStrToken(u$,s$[stIdx])
    if tlen == 0 then
      exitfunc 3
    endif
    num=num-1
    stIdx = stIdx+1
  endwhile
endfunc 0

//Empty functions as module does not have BTC support

//-------------------------------------------------------------------------
//#CMD#//  scan abort
//#CMD#//  scan stop
//#CMD#//  scan config #INTcfgID# #INTvalue#
//#CMD#//  scan start #INTscantimeoutms# #INThandlefilter#
//                                          INThandlefilter is 0 to NUM_OF_WHITELIST
//-------------------------------------------------------------------------
function _Scan()
  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen == 0 then
    exitfunc 5
  endif
  if strcmp(tkn$,"stop")==0 then
    //Cancel the connection attempt (release memory)
    exitfunc BleScanStop()
  endif
  if strcmp(tkn$,"abort")==0 then
    //Cancel the connection attempt (do not release memory)
    exitfunc BleScanAbort()
  endif

  if strcmp(tkn$,"start")==0 then
    //Extract 2 : (scantimeoutms handleFilter) and store starting at i[1]
    rc = ExtractIntTokens(urtcmd$,1,2)
    if rc != 0 then
      exitfunc rc
    endif
    if (i[2]<=0)||(i[2]>NUM_OF_WHITELIST) then
      i[2]=0
    endif
    rc = blescanflush()
    IF rc != 0 THEN
     print "##ble scan flush error " ; rc ; "\n"
    endif 
    rc =  BleScanStart(i[1],hWlist[i[2]])
    if rc == 24673 then
      rc = blescanstop()
    endif 
    IF rc != 0 THEN
     print "##ble scan start error " ; rc ; "\n"
    endif 
    exitfunc rc 
  endif
  endfunc 5

//-------------------------------------------------------------------------
//#CMD#//  connect cancel
//#CMD#//  connect config #INTcfgID# #INTvalue#
//#CMD#//  connect connparms #INTconnHandle# #INTminConnIntMs# #INTmaxConnIntMs# #INTsprvsnToutMs# #INTslavelatency#
//#CMD#//  connect #HEXaddr7Bytes# #INTconntimeoutms# #INTminConnIntMs# #INTmaxConnIntMs# #INTsprvsnToutMs#
//-------------------------------------------------------------------------
function _Connect()
  tlen = ExtractStrToken(urtcmd$,tkn$)
  if tlen == 0 then
    exitfunc 5
  endif


  //=================================================
  //The current token has to be a mac address
  s$[1]=StrDehexize$(tkn$)
  if strlen(s$[1]) != 7 then
    exitfunc 5
  endif
  //Extract 4 : (conntimeoutms minConnIntMs maxConnIntMs sprvsnToutMs) and store starting at i[1]
  rc = ExtractIntTokens(urtcmd$,1,4)
  if rc != 0 then
    exitfunc rc
  endif
  
    rc =BleConnect(s$[1],i[1],i[2],i[3],i[4])
  if rc != 0 then
    print "##ble Connect error " ; strhexize$(s$[1]) ; " "; integer.h' rc ; "\n"
  endif
  endfunc rc 

//-------------------------------------------------------------------------
//#CMD#//  disconnect #INTconnHandle#
//-------------------------------------------------------------------------
function _Disconnect()
  //Extract the optional handle
  dim handle
  tlen = ExtractIntToken(urtcmd$, handle)
  //Handle was supplied
endfunc BleDisconnect(handle)


//-------------------------------------------------------------------------
//#CMD#//  gattc open       #INTbuflen# #INTflags#
//#CMD#//  gattc close
//#CMD#//  gattc svc first  #INTconnHandle# #INTstartAttrHandle# #
//#CMD#//  gattc char first #INTconnHandle# #INTuuidHandle# #INTsvcStartAttrHandle# #INTsvcEndAttrHandle#
//#CMD#//  gattc char next  #INTconnHandle#
//#CMD#//  gattc desc first #INTconnHandle# #INTuuidHandle# #INTcharStartAttrHandle#
//#CMD#//  gattc desc next  #INTconnHandle#
//#CMD#//  gattc findchar   #INTconnHandle# #INTsvcUuidHandle# #INTsvcIndex# #INTcharUuidHandle# #INTcharIndex#
//#CMD#//  gattc finddesc   #INTconnHandle# #INTsvcUuidHandle# #INTsvcIndex# #INTcharUuidHandle# #INTcharIndex# #INTdescUuidHandle# #INTdescIndex#
//#CMD#//  gattc tablemap   #INTconnHandle#
//#CMD#//  gattc read       #INTconnHandle# #INTattrHandle# #INToffset#
//#CMD#//  gattc write      #INTconnHandle# #INTattrHandle# #HEXdata#
//#CMD#//  gattc write$     #INTconnHandle# #INTattrHandle# #STRdata#
//#CMD#//  gattc writecmd   #INTconnHandle# #INTattrHandle# #HEXdata#
//#CMD#//  gattc writecmd$  #INTconnHandle# #INTattrHandle# #STRdata#
//-------------------------------------------------------------------------
function _Gattc()
  dim handle, attr, data$ , hex$
  tlen = ExtractStrToken(urtcmd$,tkn$)

  if strcmp(tkn$,"writecmd") == 0 then
    tlen =ExtractIntToken(urtcmd$,handle)
    tlen =ExtractIntToken(urtcmd$,attr)
    tlen = ExtractStrToken(urtcmd$,data$)
    hex$ = StrDehexize$(data$)
    //  print "write " ; handle ; " " ; attr ; " " ; hex$ ; " \n"
    rc = BleGattcWriteCMD(handle, attr, hex$)
    if rc != 0 then 
      print "## writeE:";handle; " "; rc; "\n"
    endif
  elseif strcmp(tkn$,"writecmdx") == 0 then 
    tlen =ExtractIntToken(urtcmd$,handle)
    tlen = ExtractIntToken(urtcmd$,attr)
    strshiftleft(urtcmd$, 1)
    hex$ = left$(urtcmd$, attr)
    //  print "write " ; handle ; " " ; attr ; " " ; hex$ ; " \n"
    rc = BleGattcWriteCMD(handle, 18, hex$)
    if rc != 0 then 
      print "## writexE:";handle; " "; urtcmd$;" "; rc; "\n"
    else
      //print "## writex data:" ; hex$  ; "-size "; attr; "\n"
    endif 
  else
    print "## unsuported gattc " ; tkn$  ; " " ;urtcmd$  ; " " ; " \n" 
  endif 

endfunc 5 

function _Adv()
  dim  data$, hex$
  dim addr$: addr$ = "" 
  dim scRpt$: scRpt$ = ""
  DIM advRpt$ : advRpt$=""
  DIM discovMode : discovMode=0
  DIM advAppearance : advAppearance = 0
  DIM maxDevName : maxDevName = 0
  
  tlen = ExtractStrToken(urtcmd$, data$)
  hex$= strDeHexize$(data$)

  IF BleAdvRptInit(advRpt$, discovMode, advAppearance, maxDevName)!=0 THEN
  PRINT "##error -> Advert report initialised \n"
  ENDIF

  IF BleAdvRptAppendAD(advRpt$,0xFF,hex$)!=0 THEN 
  print "##error adv rept append AD \n"
  ENDIF

  if  BleAdvRptsCommit(advRpt$, scRpt$) != 0 then
    print "##error adv rpt commit\n"
  endif 
  rc =  BleAdvertStart(0,addr$,25,300,0)
  if rc !=0 THEN
  PRINT "##errror adverts start "; rc ;"\n"  
  endif
endfunc 5 


//==============================================================================
//==============================================================================
function OnUartCmd() as integer
  rc=-2 //Default response is ">"
  tlen = ExtractStrToken(urtcmd$,tkn$) //Get first token
  if tlen > 0 then

    if strcmp(tkn$,"scan")==0 then
      rc = _Scan()

    elseif strcmp(tkn$,"connect")==0 then
      rc = _Connect()

    elseif strcmp(tkn$,"disconnect")==0 then
      rc = _Disconnect()

    elseif strcmp(tkn$,"gattc")==0 then
      print "##:" ; urtcmd$ ; "\n"
      rc = _Gattc()

    elseif strcmp(tkn$,"adv")==0 then
      rc = _Adv()



    elseif strcmp(tkn$,"exit")==0 || strcmp(tkn$,"quit")==0  then
      exitfunc 0

    else
        rc=-4 //Send an "UNKNOWN COMMAND" response to user

    endif
  endif
endfunc 1

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerUartRxCmd() as integer
  dim nMatch

  if urts < 0 then
    //Uart parser is suspended
    exitfunc 1
  endif

  //Check if CR has been received
  nMatch=UartReadMatch(stRsp$,13)
  if nMatch!=0 then
    //CR exists in the input buffer
    urtcmd$ = strsplitleft$(stRsp$,nMatch)
    exitfunc OnUartCmd()
  endif
endfunc 1




//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
  dim hz, addr$ , Val$

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    hz = AcqConnHandle(nCtx)
    conns = conns + 1
    rc=BleGetAddrFromConnHandle(nCtx,addr$)
//    print "con:"; strHexize$(addr$); " "; integer.h' nCtx;"\n"
    if hz == 0 then
      //Could not store the handle so drop the connection
      //rc = BleDisconnect(nCtx)
      print "##dconnA:"; strHexize$(addr$); " ";integer.h' nCtx;"\n"
    else
      rc = BleGattcOpen(4096,4096)
      if rc != 0 then
        print "gattc:error"
      endif
      rc = BleGattcAttributeMtuRequest(nCtx)
      if rc != 0 then
        print "##error:" ;strHexize$(addr$); " mtu error \n"   
      endif
      hcVsp = hc[hz]
      print "connA:"; strHexize$(addr$); " ";integer.h' nCtx;"\n"
    endif

  case BLE_EVBLEMSGID_DISCONNECT
    hz = RelConnHandle(nCtx)
    conns = conns - 1
    rc=BleGetAddrFromConnHandle(nCtx,addr$)
    print "dconnH:"; integer.h'  nCtx; " \n"

  case BLE_EVBLEMSGID_DISPLAY_PASSKEY
    DbgMsgVal("Display Pairing Passkey ",nCtx)

  case BLE_EVBLEMSGID_NEW_BOND
    DbgMsg("+++ New Bond")

  case BLE_EVBLEMSGID_UPDATED_BOND
    DbgMsg("+++ Updated Bond")

  case BLE_EVBLEMSGID_ENCRYPTED
    DbgMsg("+++Encrypted Connection")

  case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
    //print "0:"; strHexize$(addr$); " bonded\n"

  case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
    DbgMsgVal("++ Auth Key Request, type=",nCtx)

  case   BLE_EVBLEMSGID_AUTHENTICATION_FAILED
    DbgMsgVal("++ Auth Failed ", nCtx)


  case BLE_EVBLEMSGID_LESC_PAIRING
    DbgMsgVal(" +++ LESC ", nCtx)

  case BLE_EVBLEMSGID_LESC_OOB_REQUEST
    DbgMsgVal(" +++ LESC OOB ", nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
    DbgMsg(" ??? Conn Parm Neg")

  case else
    DbgMsgVal("Unknown ", nMsgId)
  endselect
endfunc 1

//==============================================================================
// This handler is called when there is an advert timeout
//==============================================================================
function HandlerBlrAdvTimOut() as integer
  //DbgMsg( "advto:1\n" )
endfunc 1

//==============================================================================
// This handler is called when there is an advert report waiting to be read
//==============================================================================
function HandlerAdvRpt() as integer
  dim ad$,dta$,ndisc,rsi
  dim check$ ,dcheck$ 

  check$ = "770081" 
  dcheck$ = StrDehexize$(check$) 
  rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  while rc==0
    if strpos(dta$,dcheck$, 5 ) == 5 then
    print "adv:";strhexize$(ad$);" ";strhexize$(dta$);" ";ndisc;" ";rsi;"\n"
    endif 
    rc = BleScanGetAdvReport(ad$,dta$,ndisc,rsi)
  endwhile
endfunc 1


//==============================================================================
// This handler is called when there is a connection attempt timeout
//==============================================================================
function HandlerBlrConnTimOut() as integer
  print "dconnTO\n" 
endfunc 1

//==============================================================================
// This handler is called when there is a scan attempt timeout
//==============================================================================
function HandlerBlrScanTimOut() as integer
  print "scan:timeout\n" 
endfunc 1

//==============================================================================
//==============================================================================
function HandlerAttrWrite(hConn,aHndl,nSts) as integer
  dim addr$
  rc  = BleGetAddrFromConnHandle(hConn,addr$)
  if aHndl == 19 then 
  print "writec:" ;   integer.h' hConn ;" " ;aHndl ;"\n"
  else 
  //print "##writec:" ; strHexize$(addr$); " " ;  aHndl ;" " ; integer.h' hConn ;" ";hConn;"\n"
  endif 
endfunc 1


//==============================================================================
// This handler is called when the packet length is changed
//==============================================================================
function HandlerPacketLength(BYVAL hConn, BYVAL Tx_Octets, BYVAL Tx_Time, BYVAL Rx_Octets, BYVAL Rx_Time)
  //  dim addr$
  //  rc  = BleGetAddrFromConnHandle(hConn,addr$)
  // print "dCon:"; strHexize$(addr$);" "; hConn ;" plen max ";Tx_Octets; " ";Rx_Octets; "\n"   
  // print "Tx_Octets=";Tx_Octets;" Tx_Time =";Tx_Time;"\n"
  // print  "Rx_Octets=";Rx_Octets;" Rx_Time =";Rx_Time;"\n"

        dim Val$
          Val$ = "\01\00"
        rc = BLEGATTCWRITE(hConn, 19, Val$)
        if rc != 0 then
        print "error " ; rc; "\n"
        endif
endfunc 1

function HandlerAttrMTU(BYVAL hCOnn AS INTEGER, BYVAL nSize AS INTEGER)
  // dim addr$
  //   rc=BleGetAddrFromConnHandle(hConn,addr$)
  // print "dCon:"; strHexize$(addr$); " mtu "; nSize; "\n"
endfunc 1

FUNCTION HndlrAttrNotifyEx(BYVAL hConn AS INTEGER, BYVAL hAttr AS INTEGER,BYVAL nType AS INTEGER, BYVAL nLength AS INTEGER,BYVAL data$ AS STRING)
  dim addr$
  //rc=BleGetAddrFromConnHandle(hConn,addr$)
  // print "evt_hvx:";strHexize$(addr$); " " ;  hAttr; " "
  // PRINT strHexize$(Data$) ; "\n"

  print "evt_hvx:"; integer.h' hConn; " " ;  hAttr; " "
  PRINT strHexize$(Data$) ; "\n"
  do 
  until uartinfo(5) == 0
  Data$ = ""

ENDFUNC 1
//******************************************************************************
//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVUARTRX                 call HandlerUartRxCmd

OnEvent  EVBLE_ADV_TIMEOUT        call HandlerBlrAdvTimOut
OnEvent  EVBLEMSG                 call HandlerBleMsg
OnEvent  EVBLE_CONN_TIMEOUT       call HandlerBlrConnTimOut
OnEvent  EVBLE_SCAN_TIMEOUT       call HandlerBlrScanTimOut
OnEvent  EVBLE_ADV_REPORT         call HandlerAdvRpt

OnEvent  EVATTRWRITE              call HandlerAttrWrite


onEvent EVATTRIBUTEMTU           call HandlerAttrMTU
OnEvent EVPACKETLENGTH           call HandlerPacketLength
ONEVENT EVATTRNOTIFYEX      CALL HndlrAttrNotifyEx


//------------------------------------------------------------------------------
// Initialise Services and then wait for events
//------------------------------------------------------------------------------

//==============================================================================
//==============================================================================
sub Initialise()
  InitConnHandles()
endsub


//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
Initialise()
//Startup()

//Send user prompt for uart based command interface
dim fw , sb 
fw = sysinfo(3)
sb = sysinfo(33)
print "cmd: ";integer.h' fw;" ";integer.h' sb;" 0.1 ";"\n"
rc = BleScanConfig(2, 0)
if rc != 0 then 
print "bleScanConifg error ";rc ; "\n"
endif 
//wait for tx buffer to empty 
do 
until uartinfo(5) == 0
UartClose()
//rc = UartOpen(115200, 2048, 2048, "CN81H")

rc = UartOpen(921600, 4096, 4096, "CN81H")
//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent
